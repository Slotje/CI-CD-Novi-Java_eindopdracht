name: Build and Deploy to DigitalOcean Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package

      - name: Run tests
        run: mvn test

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME_LOWER=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_NAME_LOWER:latest .

      - name: Push Docker image
        run: |
          IMAGE_NAME_LOWER=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker push $IMAGE_NAME_LOWER:latest
          echo "IMAGE_NAME=$IMAGE_NAME_LOWER:latest" >> $GITHUB_ENV

  deploy:
    name: Deploy to DigitalOcean Kubernetes
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_NAME }}

      - name: Create k8s YAML
        run: |
          mkdir -p k8s
          
          # Deployment YAML
          cat > k8s/deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: techiteasy
            labels:
              app: techiteasy
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: techiteasy
            template:
              metadata:
                labels:
                  app: techiteasy
              spec:
                containers:
                - name: techiteasy
                  image: ${{ env.IMAGE_NAME }}
                  ports:
                  - containerPort: 8080
                  resources:
                    limits:
                      cpu: "0.5"
                      memory: "512Mi"
                    requests:
                      cpu: "0.2"
                      memory: "256Mi"
          EOF
          
          # Service YAML
          cat > k8s/service.yaml << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: techiteasy
          spec:
            selector:
              app: techiteasy
            ports:
            - port: 80
              targetPort: 8080
            type: LoadBalancer
          EOF

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout restart deployment/techiteasy